version: "3.8"

services:
  app:
    container_name: craft
    hostname: craft
    image: craft
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: Dockerfile
      args:
        END: 'TEST'
    volumes:
      - "/tmp:/tmp"

    ports:
      - '8080:8080'

    restart: 'on-failure'

    depends_on:
      - db
      - kafka

#    logging:
#      driver: fluentd
#      options:
#        fluentd-address: fluentbit:24224
#        fluentd-async-connect: "true"
#        tag: 'containerssh.{{.ID}}'

    environment:
      - SLEEP_LENGTH=5
      - spring.datasource.url=jdbc:mysql://db:3306/craft?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&autoReconnect=true&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
      - spring.datasource.username=test
      - spring.datasource.password=root1234
      - spring.kafka.bootstrap-servers=kafka:9092
      - spring.security.oauth2.client.registration.google.client-id=809236032393-ms8jl2qt0v6uu0gakv0339ekoq5iva26.apps.googleusercontent.com
      - spring.security.oauth2.client.registration.google.client-secret=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

  sonar:
    image: sonarqube:7.9.5-community
    container_name: sonar
    depends_on:
      - sonar-db
      - init
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar-db:5433/sonar
      SONAR_JDBC_USERNAME: sonartest
      SONAR_JDBC_PASSWORD: sonartest
      sonar.web.port: 9000
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    ulimits:
      nproc: 131072
      nofile:
        soft: 8192
        hard: 131072
    ports:
      - "9017:9000"
  init:
    image: bash
    container_name: init
    privileged: true
    user: root
    volumes:
      - ./sonarqube/init.sh:/mnt/init.sh
    command: [ "sh", "-e", "/mnt/init.sh" ]

  sonar-db:
    image: postgres:14.4
    container_name: sonar-db
    environment:
      POSTGRES_USER: sonartest
      POSTGRES_PASSWORD: sonartest
    volumes:
      - sonar_postgresql:/var/lib/postgresql
      - sonar_postgresql_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'

  db:
    image: 'mysql:latest'
    container_name: db
    environment:
      - 'MYSQL_DATABASE=craft'
      - 'MYSQL_PASSWORD=root1234'
      - 'MYSQL_ROOT_PASSWORD=root1234'
      - 'MYSQL_USER=test'
    ports:
      - '3306:3306'

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss256K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"

volumes:
  grafana_data: { }
  influxdb_data: { }
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_postgresql:
  sonar_postgresql_data:
  keycloak_postgresql:
  keycloak_postgresql_data:

networks:
  craft:
    external: true