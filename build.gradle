buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.39")
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
}

apply plugin: 'io.spring.javaformat'

group = 'code.shubham'
version = '0.0.1'

java {
	sourceCompatibility = '20'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor (
		'org.springframework.boot:spring-boot-configuration-processor',
		'org.projectlombok:lombok',
	)
	compileOnly (
		'org.projectlombok:lombok',
	)
	developmentOnly (
		'org.springframework.boot:spring-boot-devtools',
	)
	implementation(
		'org.springframework.boot:spring-boot-starter-actuator',
		'org.springframework.boot:spring-boot-starter-log4j2',
		'com.lmax:disruptor:3.3.6',
		'io.sentry:sentry-spring-boot-starter-jakarta:6.28.0',
		'com.google.code.gson:gson:2.8.9',
		'org.springframework.boot:spring-boot-starter-data-jpa',
		'org.springframework.boot:spring-boot-starter-webflux',
		'org.springframework.boot:spring-boot-starter-web',
		'org.springframework.kafka:spring-kafka',
	)
	runtimeOnly (
		'com.mysql:mysql-connector-j',
		'io.micrometer:micrometer-registry-prometheus',
	)
	testImplementation (
		'org.springframework.boot:spring-boot-starter-test',
		'io.projectreactor:reactor-test',
		'org.springframework.kafka:spring-kafka-test',
	)
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(io.spring.javaformat.gradle.tasks.CheckFormat) {
	exclude "package/to/exclude"
}

jacoco {
	toolVersion = "0.8.9"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

test {
	jacoco {
		enabled = true
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}
}